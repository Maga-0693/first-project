package JavaCore.Kurs19.Tema5.Zadacha2;

public class Expense {
    // величина траты
    private double value;

    // номер транзакции
    private int transaction;

    public double getValue() {
        return value;
    }

    public void setValue(double val) {
        value = val;
    }

    public Integer getTransaction() {
        return transaction;
    }

    public void setTransaction(Integer tr) {
        transaction = tr;
    }

    /* В конструкторе мы сгенерируем уникальный номер транзакции от 0 до 1 000 000
       с помощью функции Math.random(); */
    public Expense(double val) {
        value = val;
        transaction = (int) Math.round(Math.random() * 1_000_000);
    }
}
/*Теперь, когда приложение работает со списками, можно расширить его функционал.
Добавьте в класс Praсtiсum две новые команды меню:
«6 — Очистить список трат»;
«7 — Найти и удалить трату».
Новые команды должны обращаться к методам класса ExpensesManager — напишите их:
Метод removeAllExpenses() должен очищать список трат и печатать фразу «Список трат пуст».
Метод removeExpense(int transaction) должен проверять, содержится ли указанное пользователем значение в списке.
Если в списке нет ни одной траты, то нужно сообщить пользователю, что «Список трат пуст». Если трата найдена,
то её нужно удалить и сообщить об этом. Если указанной суммы расходов в списке нет, то нужно вывести на экран,
что «Такой траты нет».
В этом задании мы добавляем функцию поиска. Так как поиск по значению траты не будет точным (ведь могут существовать
периодические одинаковые траты, а сравнение чисел Double на одинаковость не может быть гарантировано), предлагаем
перейти к использованию класса-контейнера для значения трат и для хранения уникального номера этой траты (назовём
его номером транзакции).
Чтобы удалить элемент, вам потребуется вычислить его индекс — используйте для этого цикл и не забудьте его прервать.
Найденный индекс сохраните в переменную index. Обратите внимание: несмотря на наличие метода remove для элемента,
в этом задании мы предлагаем удалять первый найденный элемент по индексу.*/